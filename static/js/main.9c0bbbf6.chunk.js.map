{"version":3,"sources":["components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Friends/Friends.module.css","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Navbar/Navbar.module.css","components/Profile/MyPosts/Post/Post.module.css","reportWebVitals.ts","components/Navbar/Navbar.tsx","components/hoc/withAuthReducer.tsx","components/Friends/Friends.tsx","redux/API/api.ts","redux/auth-reducer.ts","redux/dialogs-reducer.ts","redux/profile-reducer.ts","redux/users-reducer.ts","redux/redux-store.ts","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","assets/icons/avatar-male.png","components/Users/Users.tsx","assets/icons/preloader.svg","components/common/Preloader/Preloader.tsx","components/Users/UsersAPI.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainter.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NavBar","className","style","nav","to","link","active","item","ico","viewBox","xmlns","clip-rule","d","fill","fill-rule","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","compose","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","response","data","userId","post","delete","console","warn","profileAPI","getUserProfile","getStatus","updateStatus","status","authAPI","initialState","messages","id","email","login","setUserDataAC","type","UPDATE_NEW_MESSAGE_BODY","SEND_MESSAGE","dialogsData","v1","name","messagesData","message","messageText","ADD_POST","CHANGE_POST_TEXT","postText","postsData","likesCount","profile","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","lookingForAJob","lookingForAJobDescription","fullName","photos","small","large","userStatus","users","totalUsersCount","isFetching","isFollowingInProgress","setUsersAC","setCurrentPageAC","toggleIsFetchingAC","toggleFollowingProgressAC","rootReducers","combineReducers","profilePage","action","newPost","newText","dialogsPage","newMessage","messageBody","usersPage","map","u","followed","filter","store","createStore","applyMiddleware","thunkMiddleware","window","DialogItem","path","Message","Dialogs","dialogs","sendMessage","onChange","dialogsElements","dialog","messagesElements","el","people","chats","value","e","currentTarget","onClick","dispatch","text","Users","render","pageNumber","pageNumbers","src","userPhoto","alt","width","disabled","some","unfollowUser","followUser","React","Preloader","preloader","UsersAPI","componentDidMount","getUsers","getNewUsers","Math","ceil","pages","i","push","mappedPages","page","event","toggleFollowingProgress","setUsers","setCurrentPage","setTotalUsersCount","setTotalUsersCountAC","toggleIsFetching","items","getUsersTH","resultCode","followUserAC","unfollowUserAC","ProfileStatus","editMode","enableEditMode","setState","disableEditMode","onStatusChange","onEnter","key","profileStatus","autoFocus","onBlur","onKeyPress","placeholder","onDoubleClick","ProfileInfo","Object","entries","keys","description","Post","MyPosts","addPost","changePostText","textPost","postsElements","posts","field","button","MyPostsContainer","Profile","ProfileContainer","match","params","getProfilePage","withRouter","Header","header","container","logo","title","loginBox","content","HeaderContainer","authMe","setUserData","Login","App","appState","DialogsContainer","UsersContainer","rerenderEntireTree","ReactDOM","StrictMode","getState","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.9c0bbbf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"loginBox\":\"Header_loginBox__1Y8Fj\",\"login\":\"Header_login__3V3Qa\",\"container\":\"Header_container__1VC87\",\"ico\":\"Header_ico__3nHTW\",\"logo\":\"Header_logo__3_SJs\",\"title\":\"Header_title__3SH2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"people\":\"Dialogs_people__eRIC_\",\"chats\":\"Dialogs_chats__3tP3Y\",\"item\":\"Dialogs_item__29pPd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__3tZ1c\",\"post\":\"MyPosts_post__38Ltf\",\"item\":\"MyPosts_item__R6Jlo\",\"button\":\"MyPosts_button__2WbpQ\",\"field\":\"MyPosts_field__1WcIv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentPage\":\"Users_currentPage__3Uoko\",\"pageNumber\":\"Users_pageNumber__3oN48\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__2yWda\",\"contacts\":\"ProfileInfo_contacts__3y62P\",\"keys\":\"ProfileInfo_keys__39ohU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Friends_item__1dHUF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3dzvr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatus\":\"ProfileStatus_profileStatus__28WHH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2imOE\",\"item\":\"Navbar_item__zmMk4\",\"link\":\"Navbar_link__TNvz9\",\"ico\":\"Navbar_ico__2YUmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport style from './Navbar.module.css'; //style – это не зарезервированное слово. может быть любое\n\nconst NavBar = () => {\n    return (\n        <nav className={style.nav}>\n            <ul>\n                <NavLink to=\"/profile\" className={`${style.link} ${style.active}`}>\n                    <li className={style.item}>\n                        <svg className={style.ico} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path clip-rule=\"evenodd\" d=\"M5 12.5H2L12 3.5L22 12.5H19V20.5H13V14.5H11V20.5H5V12.5ZM17 10.69L12 6.19L7 10.69V18.5H9V12.5H15V18.5H17V10.69Z\" fill=\"#7E8EAB\" /> </svg>\n                        Profile</li></NavLink>\n                <NavLink to=\"/dialogs\" className={`${style.link} ${style.active}`}>\n                    <li className={style.item}>\n                        <svg className={style.ico} viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 0H18C19.1 0 20 0.9 20 2V14C20 15.1 19.1 16 18 16H4L0 20V2C0 0.9 0.9 0 2 0ZM4 14H18V2H2V16L4 14Z\" fill=\"#7E8EAB\" />\n                        </svg>\n\n                        Messages</li></NavLink>\n                <NavLink to=\"/friends\" className={`${style.link} ${style.active}`}>\n                    <li className={style.item}>\n\n                        <svg className={style.ico} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M10 12C12.2091 12 14 10.2091 14 8C14 5.79086 12.2091 4 10 4C7.79086 4 6 5.79086 6 8C6 10.2091 7.79086 12 10 12Z\" fill=\"#7A8DB3\" />\n                            <path d=\"M10.35 14.01C7.62 13.91 2 15.27 2 18V19C2 19.55 2.45 20 3 20H11.54C9.07 17.24 10.31 14.11 10.35 14.01Z\" fill=\"#7A8DB3\" />\n                            <path d=\"M19.43 18.02C19.9 17.22 20.13 16.25 19.91 15.2C19.57 13.56 18.19 12.25 16.53 12.04C13.9 11.7 11.68 13.91 12.03 16.54C12.25 18.2 13.55 19.58 15.19 19.92C16.24 20.14 17.21 19.91 18.01 19.44L19.87 21.3C20.26 21.69 20.89 21.69 21.28 21.3C21.67 20.91 21.67 20.28 21.28 19.89L19.43 18.02ZM16 18C14.9 18 14 17.1 14 16C14 14.9 14.9 14 16 14C17.1 14 18 14.9 18 16C18 17.1 17.1 18 16 18Z\" fill=\"#7A8DB3\" />\n                        </svg>\n                        Friends</li></NavLink>\n                <NavLink to=\"/users\" className={`${style.link} ${style.active}`}>\n                    <li className={style.item}>\n\n                        <svg className={style.ico} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M10 12C12.2091 12 14 10.2091 14 8C14 5.79086 12.2091 4 10 4C7.79086 4 6 5.79086 6 8C6 10.2091 7.79086 12 10 12Z\" fill=\"#7A8DB3\" />\n                            <path d=\"M10.35 14.01C7.62 13.91 2 15.27 2 18V19C2 19.55 2.45 20 3 20H11.54C9.07 17.24 10.31 14.11 10.35 14.01Z\" fill=\"#7A8DB3\" />\n                            <path d=\"M19.43 18.02C19.9 17.22 20.13 16.25 19.91 15.2C19.57 13.56 18.19 12.25 16.53 12.04C13.9 11.7 11.68 13.91 12.03 16.54C12.25 18.2 13.55 19.58 15.19 19.92C16.24 20.14 17.21 19.91 18.01 19.44L19.87 21.3C20.26 21.69 20.89 21.69 21.28 21.3C21.67 20.91 21.67 20.28 21.28 19.89L19.43 18.02ZM16 18C14.9 18 14 17.1 14 16C14 14.9 14.9 14 16 14C17.1 14 18 14.9 18 16C18 17.1 17.1 18 16 18Z\" fill=\"#7A8DB3\" />\n                        </svg>\n                        Users</li></NavLink>\n\n            </ul >\n        </nav >\n    )\n}\n\nexport default NavBar;\n","import React, { ComponentType } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { ReduxStateType } from '../../redux/redux-store'\n\ntype mapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: ReduxStateType): mapStateToPropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStateToPropsType) => {\n        const { isAuth, ...restProps } = props\n\n        if (!isAuth) return <Redirect to='/login' />\n        return <Component {...restProps as T} />\n    }\n\n    const connectedComponent = connect(mapStateToProps)(RedirectComponent);\n\n    return connectedComponent;\n}","import React from 'react';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../hoc/withAuthReducer';\nimport style from './Friends.module.css';\n\nconst Friends = () => {\n    return (\n        <div className={style.item}>\n            Friends\n        </div>\n    )\n}\n\nexport default compose(withAuthRedirect)(Friends)","import axios from \"axios\"\n\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    withCredentials: true,\n    headers: { 'API-KEY': 'dcfcafd7-85ce-4812-a7da-28eb32543b9d' }\n})\n\nexport const usersAPI = {\n    getUsers(currentPage: number, pageSize: number) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data)\n    },\n    followUser(userId: number) {\n        return instance.post(`follow/${userId}`).then(response => response.data)\n    },\n    unfollowUser(userId: number) {\n        return instance.delete(`follow/${userId}`).then(response => response.data)\n    },\n    getUserProfile(userId: string) {\n        console.warn('Obsolete method. Please use profileAPI object');\n        return profileAPI.getUserProfile(userId)\n    }\n}\nexport const profileAPI = {\n    getUserProfile(userId: string) {\n        return instance.get(`profile/${userId}`)\n    },\n    getStatus(userId: string) {\n        return instance.get(`profile/status/${userId}`)\n    },\n    updateStatus(status: string) {\n        return instance.get(`profile/status`, { data: { status } })\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`).then(response => response.data)\n    }\n}\n\n\n","import { authAPI } from './API/api'\nimport { AppThunk } from './redux-store'\n\nconst initialState: AuthUserType = {\n    messages: [],\n    data: {\n        id: 2,\n        email: 'blabla@bla.bla',\n        login: 'samurai',\n    },\n    isAuth: false,\n}\n\nexport const authReducer = (state: AuthUserType = initialState, action: AuthActionTypes): AuthUserType => {\n    switch (action.type) {\n        case 'SET_USER_DATA':\n            return {\n                ...state,\n                data: { ...action.data },\n                isAuth: true,\n            }\n        default:\n            return state\n    }\n}\n\nexport type AuthActionTypes = ReturnType<typeof setUserDataAC>\n\nexport const setUserDataAC = (id: number, email: string, login: string) => {\n    return {\n        type: 'SET_USER_DATA',\n        data: { id, email, login },\n    } as const\n}\n\nexport const authMe = (): AppThunk => {\n    return (dispatch) => {\n        authAPI.me().then((data) => {\n            if (data.resultCode === 0) {\n                let { id, email, login } = data.data\n                dispatch(setUserDataAC(id, email, login))\n            }\n        })\n    }\n}\n\nexport type AuthUserType = {\n    messages: []\n    data: UserDataType\n    isAuth: boolean\n}\nexport type UserDataType = {\n    id: number\n    email: string\n    login: string\n}\n","import { v1 } from \"uuid\";\n\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY'\nconst SEND_MESSAGE = 'SEND-MESSAGE'\n\n\nconst initialState: DialogPageType = {\n    dialogsData: [\n        { id: v1(), name: \"Nastya\", },\n        { id: v1(), name: \"Tanya\", },\n        { id: v1(), name: \"Anna\", },\n        { id: v1(), name: \"Mike\", },\n        { id: v1(), name: \"Lena\", },\n    ],\n    messagesData: [\n        { id: v1(), message: \"hey\", },\n        { id: v1(), message: \"how're you?\", },\n        { id: v1(), message: \"Check some pics of Lena\", },\n        { id: v1(), message: \"Check it out dude\", },\n        { id: v1(), message: '', },\n    ],\n    messageText: '',\n}\n\nexport const dialogsReducer = (state: DialogPageType = initialState, action: DialogsActionTypes): DialogPageType => {\n\n    switch (action.type) {\n        case SEND_MESSAGE:\n            const newMessage = { id: v1(), message: action.messageText }\n            return {\n                ...state,\n                messagesData: [...state.messagesData, newMessage],\n                messageText: ''\n            }\n        case UPDATE_NEW_MESSAGE_BODY:\n            return {\n                ...state,\n                messageText: action.messageBody\n            }\n\n        default: return state\n    }\n}\n\nexport type DialogsActionTypes = ReturnType<typeof sendMessageAC> | ReturnType<typeof updateMessageAC>\n\nexport const sendMessageAC = (messageText: string) => {\n    return {\n        type: SEND_MESSAGE,\n        messageText: messageText\n    } as const\n}\nexport const updateMessageAC = (messageBody: string) => {\n    return {\n        type: UPDATE_NEW_MESSAGE_BODY,\n        messageBody: messageBody\n    } as const\n}\n\nexport type DialogPageType = {\n    dialogsData: Array<DialogType>\n    messagesData: Array<MessageType>\n    messageText: string\n}\ntype DialogType = {\n    id: string\n    name: string\n}\ntype MessageType = {\n    id: string\n    message: string\n}","import { v1 } from \"uuid\";\nimport { profileAPI, usersAPI } from \"./API/api\";\nimport { AppThunk } from \"./redux-store\";\nconst ADD_POST = 'ADD-POST'\nconst CHANGE_POST_TEXT = 'CHANGE-POST-TEXT'\n\n\nconst initialState: ProfilePageType = {\n    postText: '',\n    postsData: [\n        { id: v1(), message: \"Hi, how're you?\", likesCount: 15 },\n        { id: v1(), message: \"Hey, it's my first post\", likesCount: 20 },\n        { id: v1(), message: \"Hey, it's my second post here\", likesCount: 2 },\n        { id: v1(), message: \"This is a mapped post\", likesCount: 1000 },\n    ],\n    profile: {\n        userId: 2,\n        aboutMe: '',\n        contacts: {\n            facebook: '',\n            website: '',\n            vk: '',\n            twitter: '',\n            instagram: '',\n            youtube: '',\n            github: '',\n            mainLink: '',\n        },\n        lookingForAJob: true,\n        lookingForAJobDescription: '',\n        fullName: '',\n        photos: {\n            small: '',\n            large: '',\n        }\n    },\n    userStatus: ''\n};\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ProfileActionTypes): ProfilePageType => {\n    switch (action.type) {\n        case ADD_POST:\n            let newPost: PostType = {\n                id: v1(),\n                message: action.postText,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                postsData: [...state.postsData, newPost],\n                postText: ''\n            }\n        case CHANGE_POST_TEXT: {\n            return {\n                ...state,\n                postText: action.newText\n            }\n        }\n        case 'SET-PROFILE-PAGE':\n            return {\n                ...state, profile: { ...action.profile }\n            }\n        case 'SET-USER-STATUS':\n            return {\n                ...state, userStatus: action.userStatus\n            }\n        default: return state\n    }\n}\n\nexport const addPostAC = (value: string) => {\n    return {\n        type: ADD_POST,\n        postText: value\n    } as const\n}\nexport const changePostTextAC = (value: string) => {\n    return {\n        type: CHANGE_POST_TEXT,\n        newText: value\n    } as const\n}\nexport const setProfilePageAC = (profile: UserProfileType) => {\n    return {\n        type: 'SET-PROFILE-PAGE',\n        profile\n    } as const\n}\nexport const setUserStatus = (userStatus: string) => {\n    return {\n        type: 'SET-USER-STATUS',\n        userStatus\n    } as const\n}\n\nexport type ProfileActionTypes = ReturnType<typeof addPostAC> | ReturnType<typeof changePostTextAC> | ReturnType<typeof setProfilePageAC> | ReturnType<typeof setUserStatus>\n\n\n\nexport const getProfilePage = (userId: string): AppThunk => {\n    return (dispatch) => {\n        usersAPI.getUserProfile(userId).then(response => {\n            dispatch(setProfilePageAC(response.data))\n        })\n    }\n}\nexport const getUserStatus = (userId: string): AppThunk => {\n    return (dispatch) => {\n        profileAPI.getStatus(userId).then(response => {\n            dispatch(setUserStatus(response.data))\n        })\n    }\n}\n\n\nexport type ProfilePageType = {\n    postText: string\n    postsData: Array<PostType>\n    profile: UserProfileType\n    userStatus: string\n}\nexport type UserProfileType = {\n    userId: number\n    aboutMe: string\n    contacts: {\n        facebook: string\n        website: string\n        vk: string\n        twitter: string\n        instagram: string\n        youtube: string\n        github: string\n        mainLink: string\n    },\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    photos: {\n        small: string\n        large: string\n    }\n}\nexport type PostType = {\n    id: string\n    message: string\n    likesCount: number\n}\n","import { usersAPI } from \"./API/api\";\nimport { AppThunk } from \"./redux-store\";\n\nconst initialState: UsersPageType = {\n    users: [],\n    totalUsersCount: 0,\n    pageSize: 100,\n    currentPage: 1,\n    isFetching: false,\n    isFollowingInProgress: [],\n};\n\nexport const usersReducer = (state: UsersPageType = initialState, action: UsersActionTypes): UsersPageType => {\n    switch (action.type) {\n        case 'FOLLOW-USER':\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId && u.followed === false) {\n                        return { ...u, followed: true }\n                    }\n                    return u\n                })\n            }\n        case 'UNFOLLOW-USER':\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId && u.followed === true) {\n                        return { ...u, followed: false }\n                    }\n                    return u\n                })\n            }\n        case 'SET-USERS':\n            return {\n                ...state, users: [...state.users, ...action.users]\n            }\n        case 'SET-CURRENT-PAGE':\n            return {\n                ...state, currentPage: action.currentPage\n            }\n        case 'SET-TOTAL-USERS-COUNT':\n            return {\n                ...state, totalUsersCount: action.totalUsersCount\n            }\n        case 'TOGGLE-IS-FETCHING':\n            return {\n                ...state, isFetching: action.isFetching\n            }\n        case 'TOGGLE-FOLLOWING-PROGRESS':\n            return {\n                ...state, isFollowingInProgress: action.isFollowingInProgress\n                    ? [...state.isFollowingInProgress, action.userId]\n                    : state.isFollowingInProgress.filter(id => id !== action.userId)\n            }\n        default: return state\n    }\n}\n\nexport type UsersActionTypes = ReturnType<typeof followUserAC> | ReturnType<typeof unfollowUserAC> | ReturnType<typeof setUsersAC> | ReturnType<typeof setCurrentPageAC> | ReturnType<typeof setTotalUsersCountAC> | ReturnType<typeof toggleIsFetchingAC> | ReturnType<typeof toggleFollowingProgressAC>\n\nexport const followUserAC = (userId: number) => {\n    return {\n        type: 'FOLLOW-USER',\n        userId: userId\n    } as const\n}\nexport const unfollowUserAC = (userId: number) => {\n    return {\n        type: 'UNFOLLOW-USER',\n        userId: userId\n    } as const\n}\nexport const setUsersAC = (users: UserType[]) => {\n    return {\n        type: 'SET-USERS',\n        users: users\n    } as const\n}\nexport const setCurrentPageAC = (currentPage: number) => {\n    return {\n        type: 'SET-CURRENT-PAGE',\n        currentPage\n    } as const\n}\nexport const setTotalUsersCountAC = (totalUsersCount: number) => {\n    return {\n        type: 'SET-TOTAL-USERS-COUNT',\n        totalUsersCount\n    } as const\n}\nexport const toggleIsFetchingAC = (isFetching: boolean) => {\n    return {\n        type: 'TOGGLE-IS-FETCHING',\n        isFetching\n    } as const\n}\nexport const toggleFollowingProgressAC = (userId: number, isFollowingInProgress: boolean) => {\n    return {\n        type: 'TOGGLE-FOLLOWING-PROGRESS',\n        userId,\n        isFollowingInProgress\n    } as const\n}\n\n\n\n/////\n//Thunks\nexport const getUsersTH = (pageNumber: number, pageSize: number): AppThunk => {\n    return (dispatch) => {\n        dispatch(toggleIsFetchingAC(true))\n        dispatch(setCurrentPageAC(pageNumber))\n\n        usersAPI.getUsers(pageNumber, pageSize).then(data => {\n            dispatch(setUsersAC(data.items))\n            dispatch(toggleIsFetchingAC(false))\n        })\n    }\n}\nexport const followUser = (userId: number): AppThunk => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgressAC(userId, true))\n\n        usersAPI.followUser(userId).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(followUserAC(userId))\n            }\n            dispatch(toggleFollowingProgressAC(userId, false))\n        })\n    }\n}\nexport const unfollowUser = (userId: number): AppThunk => {\n    return (dispatch) => {\n        dispatch(toggleFollowingProgressAC(userId, true))\n\n        usersAPI.unfollowUser(userId).then(data => {\n            if (data.resultCode === 0) {\n                dispatch(unfollowUserAC(userId))\n            }\n            dispatch(toggleFollowingProgressAC(userId, false))\n        })\n    }\n}\n\n//Thunks\n/////\n\n\n\n\nexport type UsersPageType = {\n    users: Array<UserType>\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    isFetching: boolean\n    isFollowingInProgress: Array<number>\n}\nexport type UserType = {\n    name: string\n    id: number\n    photos: UserPhotoType\n    status: string\n    followed: boolean\n}\ntype UserPhotoType = {\n    small: string\n    large: string\n}","import { applyMiddleware, combineReducers, createStore } from 'redux'\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk'\nimport { AuthActionTypes, authReducer } from './auth-reducer';\nimport { DialogsActionTypes, dialogsReducer } from './dialogs-reducer';\nimport { ProfileActionTypes, profileReducer } from './profile-reducer';\nimport { UsersActionTypes, usersReducer } from './users-reducer';\n\nlet rootReducers = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    usersPage: usersReducer,\n    auth: authReducer\n})\n\n\nexport type ReduxStateType = ReturnType<typeof rootReducers>\nexport type ActionTypes = ProfileActionTypes | DialogsActionTypes | UsersActionTypes | AuthActionTypes\nexport type AppThunk<ReturnType = void> = ThunkAction<void, ReduxStateType, unknown, ActionTypes>\n\n\nlet store = createStore(rootReducers, applyMiddleware(thunkMiddleware));\nexport default store;\n\n//@ts-ignore\nwindow.store = store;\n\n\n\n\n","import { type } from 'os';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport style from './../Dialogs.module.css';\n\ntype DialogItemType = {\n    name: string,\n    id: string,\n}\n\nconst DialogItem = (props: DialogItemType) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={style.item}><NavLink to={path}>{props.name}</NavLink>\n        </div >\n    )\n}\n\nexport default DialogItem;","import { type } from 'os';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport style from './../Dialogs.module.css';\n\n\ntype MessageType = {\n    message: string,\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={style.item}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React, { ChangeEvent } from 'react';\nimport style from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { Redirect } from 'react-router-dom';\n\ntype DialogItemType = {\n    id: string\n    name: string\n}\n\ntype MessageItemType = {\n    id: string\n    message: string\n}\n\ntype DialogsType = {\n    dialogs: Array<DialogItemType>\n    messages: Array<MessageItemType>\n    messageText: string\n    sendMessage: (text: string) => void\n    onChange: (text: string) => void\n    isAuth: boolean\n}\n\n\nconst Dialogs: React.FC<DialogsType> = ({ dialogs, messages, messageText, sendMessage, onChange, isAuth }) => {\n    let dialogsElements = dialogs.map(dialog => (<div key={dialog.id}> <DialogItem name={dialog.name} id={dialog.id} /></div>))\n    let messagesElements = messages.map(el => <div key={el.id}><Message message={el.message} /></div>)\n\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        onChange(e.currentTarget.value)\n    }\n    const onSendMessageClick = () => {\n        sendMessage(messageText)\n    }\n\n    return (\n        <div className={style.dialogs}>\n            <div className={style.people}>{dialogsElements}</div>\n            <div className={style.chats}>\n                <div>{messagesElements}\n                    <div className={style.item}>\n                        <textarea value={messageText}\n                            onChange={onChangeHandler}>\n                        </textarea>\n                        <div><button onClick={onSendMessageClick}>Send</button></div>\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default Dialogs;","import React from 'react';\nimport Dialogs from './Dialogs';\nimport { ReduxStateType } from '../../redux/redux-store';\nimport { connect } from 'react-redux';\nimport { DialogsActionTypes, sendMessageAC, updateMessageAC } from '../../redux/dialogs-reducer';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../hoc/withAuthReducer';\n\nlet mapStateToProps = (state: ReduxStateType) => {\n    return {\n        dialogs: state.dialogsPage.dialogsData,\n        messages: state.dialogsPage.messagesData,\n        messageText: state.dialogsPage.messageText,\n        isAuth: state.auth.isAuth\n    }\n}\n\nlet mapDispatchToProps = (dispatch: (action: DialogsActionTypes) => void) => {\n    return {\n        sendMessage: (text: string) => {\n            dispatch(sendMessageAC(text))\n        },\n        onChange: (text: string) => {\n            dispatch(updateMessageAC(text))\n        }\n    }\n\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);","export default __webpack_public_path__ + \"static/media/avatar-male.e5117e8e.png\";","import React from 'react';\nimport style from '../Users/Users.module.css'\nimport userPhoto from '../../assets/icons/avatar-male.png'\nimport { NavLink } from 'react-router-dom';\nimport { UserType } from '../../redux/users-reducer';\n\n\ntype UserPropsType = {\n    pageNumbers: JSX.Element[]\n    users: Array<UserType>\n    followUser: (userId: number) => void\n    unfollowUser: (userId: number) => void\n    toggleFollowingProgress: (userId: number, isFollowingInProgress: boolean) => void\n    isFollowingInProgress: Array<number>\n    isAuth: boolean\n}\n\n\nexport class Users extends React.Component<UserPropsType> {\n\n\n    render = () => {\n        return <div>\n            <div className={style.pageNumber}>\n                {this.props.pageNumbers}\n            </div>\n            {\n                this.props.users.map(u => {\n                    return <div key={u.id}>\n                        <div>\n                            <NavLink to={'/profile/' + u.id} >\n                                <img src={u.photos.small !== null ? u.photos.small : userPhoto} alt=\"avatar\" width={\"70px\"} />\n                            </NavLink>\n                            <h2>{u.name}</h2>\n                            <span>{u.status}</span>\n                            <div>\n                                {u.followed\n                                    ? <button disabled={this.props.isFollowingInProgress.some(id => id === u.id)} onClick={\n                                        () => this.props.unfollowUser(u.id)}>Unfollow</button>\n\n                                    : <button disabled={this.props.isFollowingInProgress.some(id => id === u.id)} onClick={\n                                        () => this.props.followUser(u.id)}>Follow</button>}\n                            </div>\n                        </div>\n                    </div>\n                })\n            }\n        </div >\n    }\n}","export default __webpack_public_path__ + \"static/media/preloader.f13fb50f.svg\";","import React from 'react'\nimport preloader from '../../../assets/icons/preloader.svg'\n\n\nexport const Preloader = () => {\n    return <img src={preloader} alt=\"Please wait. The data is uploading\" />\n}","import React from \"react\";\nimport style from '../Users/Users.module.css'\nimport { Users } from './Users';\nimport { Preloader } from \"../common/Preloader/Preloader\";\nimport { UserType } from \"../../redux/users-reducer\";\n\ntype UserAPIType = {\n    users: Array<UserType>\n    totalUsersCount: number\n    pageSize: number\n    currentPage: number\n    followUser: (userId: number) => void\n    unfollowUser: (userId: number) => void\n    setUsers: (users: UserType[]) => void\n    setCurrentPage: (currentPage: number) => void\n    setTotalUsersCount: (totalUsersCount: number) => void\n    toggleIsFetching: (isFetching: boolean) => void\n    toggleFollowingProgress: (userId: number, isFollowingInProgress: boolean) => void\n    isFollowingInProgress: Array<number>\n    isFetching: boolean\n    getUsers: (pageNumber: number, pageSize: number) => void\n    isAuth: boolean\n}\n\nclass UsersAPI extends React.Component<UserAPIType> {\n\n    //TODO сделать норм пагинацию\n    componentDidMount = () => {\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\n    };\n    getNewUsers = (pageNumber: number) => {\n        this.props.getUsers(pageNumber, this.props.pageSize)\n    }\n    render = () => {\n        const pagesCount = Math.ceil(this.props.totalUsersCount / this.props.pageSize);\n        const pages = [];\n\n        for (let i = 1; i <= 10; i++) {\n            pages.push(i)\n        }\n\n        const mappedPages = pages.map(page => {\n            return (<span className={this.props.currentPage === page ? style.currentPage : ''}\n                onClick={(event) => this.getNewUsers(page)}\n\n            >{page}</span>\n            )\n        })\n\n\n        return <>\n            {this.props.isFetching\n                ? <Preloader />\n                : ''}\n\n            <Users pageNumbers={mappedPages}\n                users={this.props.users}\n                followUser={this.props.followUser}\n                unfollowUser={this.props.unfollowUser}\n                toggleFollowingProgress={this.props.toggleFollowingProgress}\n                isFollowingInProgress={this.props.isFollowingInProgress}\n                isAuth={this.props.isAuth} />\n        </>\n\n    }\n}\n\nexport default UsersAPI;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { ReduxStateType } from \"../../redux/redux-store\";\nimport { followUser, getUsersTH, setCurrentPageAC, setTotalUsersCountAC, setUsersAC, toggleFollowingProgressAC, toggleIsFetchingAC, unfollowUser, UsersActionTypes, UserType } from \"../../redux/users-reducer\";\nimport { withAuthRedirect } from \"../hoc/withAuthReducer\";\nimport UsersAPI from \"./UsersAPI\";\n\nconst mapStateToProps = (state: ReduxStateType) => {\n    return {\n        users: state.usersPage.users,\n        totalUsersCount: state.usersPage.totalUsersCount,\n        pageSize: state.usersPage.pageSize,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching,\n        isFollowingInProgress: state.usersPage.isFollowingInProgress,\n        isAuth: state.auth.isAuth\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (action: UsersActionTypes | any) => void) => {\n    return {\n        setUsers: (users: UserType[]) => {\n            dispatch(setUsersAC(users))\n        },\n        setCurrentPage: (currentPage: number) => {\n            dispatch(setCurrentPageAC(currentPage))\n        },\n        setTotalUsersCount: (totalUsersCount: number) => {\n            dispatch(setTotalUsersCountAC(totalUsersCount))\n        },\n        toggleIsFetching: (isFetching: boolean) => {\n            dispatch(toggleIsFetchingAC(isFetching))\n        },\n        toggleFollowingProgress: (userId: number, isFollowingInProgress: boolean) => {\n            dispatch(toggleFollowingProgressAC(userId, isFollowingInProgress))\n        },\n        getUsers: (pageNumber: number, pageSize: number) => {\n            dispatch(getUsersTH(pageNumber, pageSize))\n        },\n        followUser: (userId: number) => {\n            dispatch(followUser(userId))\n        },\n        unfollowUser: (userId: number) => {\n            dispatch(unfollowUser(userId))\n        },\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(UsersAPI)\n","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport style from './ProfileStatus.module.css';\n\n\ntype ProfileStatusType = {\n    status: string\n}\n\nexport class ProfileStatus extends React.Component<ProfileStatusType> {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n    enableEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n    disableEditMode = () => {\n        this.setState({\n            editMode: false\n        })\n    }\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            status: e.currentTarget.value\n        })\n    }\n    onEnter = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n\n            this.setState({\n                editMode: false\n            })\n        }\n    }\n\n    render = () => {\n        return (\n            <div className={style.profileStatus}>\n                {\n                    this.state.editMode\n                        ? <input value={this.state.status} autoFocus onBlur={this.disableEditMode} onKeyPress={this.onEnter} onChange={this.onStatusChange} placeholder=\"What's up?\" />\n                        : <span onDoubleClick={this.enableEditMode}>{\n                            !this.state.status\n                                ? \"Update your status\"\n                                : this.state.status\n                        }   </span>\n                }\n            </div >\n        )\n    }\n}\n","import React from 'react';\nimport { UserProfileType } from '../../../redux/profile-reducer';\nimport { Preloader } from '../../common/Preloader/Preloader';\nimport style from './ProfileInfo.module.css';\nimport { ProfileStatus } from './ProfileStatus/ProfileStatus';\n\ntype ProfileInfoType = {\n    profile: UserProfileType\n    status: string\n}\n\nconst ProfileInfo: React.FC<ProfileInfoType> = (props) => {\n    if (!props.profile.photos) {\n        //необходимая проверка. иначе выдаёт undefined\n        return <Preloader />\n    }\n\n\n    let contacts = Object.entries(props.profile.contacts || {}).map(([key, value]) => {\n        return (\n            <>\n                <div className={style.contacts}>\n                    <div className={style.keys}>{`${key}`}</div>\n                    <div>{`${value}`}</div>\n                </div>\n            </>\n        )\n    });\n\n\n\n    return (\n        <>\n            <div>\n                <img src={props.profile.photos.large} />\n            </div>\n            <div>\n                <h2>{props.profile.fullName}</h2>\n            </div>\n            <ProfileStatus status={props.status} />\n\n            <div className={style.description}>\n                <div>{props.profile.aboutMe}</div>\n                <div>{props.profile.lookingForAJobDescription}</div>\n                <div>{contacts}</div>\n            </div>\n        </>\n    )\n\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport style from './Post.module.css';\n\ntype PostType = {\n    message: string\n    likesCount: number\n}\n\n\nconst Post: React.FC<PostType> = (props) => {\n    return (\n        <div className={style.item}>\n            <img src='https://s6.cdn.teleprogramma.pro/wp-content/uploads/2020/01/e187d44f997b399185adaf352cc17b83.jpg' alt=\"avatar\" />\n            {props.message}\n            <div>\n                <span>like: {props.likesCount}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post;\n","import React, { ChangeEvent, LegacyRef } from 'react';\nimport style from './MyPosts.module.css';\nimport Post from './Post/Post';\n\ntype PostItem = {\n    id: string\n    message: string\n    likesCount: number\n}\n\ntype PostsData = {\n    addPost: (textPost: string) => void\n    changePostText: (text: string) => void\n    textPost: string\n    posts: Array<PostItem>\n}\n\nconst MyPosts: React.FC<PostsData> = ({ addPost, changePostText, textPost, posts }) => {\n    let postsElements = posts.map(post => <div key={post.id}> <Post message={post.message} likesCount={post.likesCount} /></div>)\n\n    let onAddPost = () => {\n        addPost(textPost)\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        let text = e.currentTarget.value;\n        changePostText(text)\n    }\n\n    return (\n        <div>\n            <div className={style.item}>\n                <textarea value={textPost} onChange={onChangeHandler} className={style.field}></textarea>\n                <button onClick={onAddPost} className={style.button}>add post</button>\n            </div>\n            <div className={style.post}>{postsElements}</div>\n        </div >\n    )\n}\n\nexport default MyPosts;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addPostAC, changePostTextAC, ProfileActionTypes } from '../../../redux/profile-reducer';\nimport { ReduxStateType } from '../../../redux/redux-store';\nimport MyPosts from './MyPosts';\n\n\nconst mapStateToProps = (state: ReduxStateType) => {\n    return {\n        textPost: state.profilePage.postText,\n        posts: state.profilePage.postsData\n    }\n}\n\nconst mapDispatchToProps = (dispatch: (action: ProfileActionTypes) => void) => {\n    return {\n        addPost: (textPost: string) => {\n            dispatch(addPostAC(textPost))\n        },\n        changePostText: (text: string) => {\n            dispatch(changePostTextAC(text))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\n\nexport default MyPostsContainer;\n\n","import React from 'react';\nimport style from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainter';\nimport { UserProfileType } from '../../redux/profile-reducer';\n\n\ntype ProfilePropsType = {\n    profile: UserProfileType\n    status: string\n}\n\nconst Profile: React.FC<ProfilePropsType> = (props) => {\n\n    return (\n        <main className={style.profile}>\n            <ProfileInfo profile={props.profile} status={props.status} />\n            <MyPostsContainer />\n        </main>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport { ProfileActionTypes, getProfilePage, UserProfileType } from '../../redux/profile-reducer';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { ReduxStateType } from '../../redux/redux-store';\nimport { compose } from 'redux';\nimport { withAuthRedirect } from '../hoc/withAuthReducer';\n\n\nconst mapStateToProps = (state: ReduxStateType): MapStateToPropsProfileType => {\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.userStatus\n    }\n}\nconst mapDispatchToProps = (dispatch: (action: ProfileActionTypes | any) => void): MapDispatchToPropsProfileType => {\n    return {\n        getProfilePage: (userId: string) => {\n            dispatch(getProfilePage(userId))\n        }\n    }\n}\n\ntype MapStateToPropsProfileType = {\n    profile: UserProfileType\n    status: string\n}\ntype MapDispatchToPropsProfileType = {\n    getProfilePage: (userId: string) => void\n}\ntype MatchParamsType = {\n    userId?: string\n}\ntype OwnProps = MapStateToPropsProfileType & MapDispatchToPropsProfileType;\ntype ProfileContainerPropsType = RouteComponentProps<MatchParamsType> & OwnProps;\n\n\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n    componentDidMount = () => {\n        let userId = this.props.match.params.userId;\n        if (userId) {\n            this.props.getProfilePage(userId)\n        }\n\n    }\n\n    render = () => {\n        return <Profile {...this.props} profile={this.props.profile} />\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport style from './Header.module.css';\nimport { OwnHeaderPropsType } from './HeaderContainer';\n\n\nconst Header: React.FC<OwnHeaderPropsType> = (props) => {\n    return (\n        <header className={style.header}>\n            <div className={style.container}>\n                <div className={style.logo}>\n                    <img className={style.ico} src=\"http://localhost:3000/logo.png\" alt=\"\" />\n                    <h1 className={style.title}>myNet</h1>\n                </div>\n                <div className={style.loginBox}>\n                    {\n                        props.isAuth\n                            ? props.login\n                            : <NavLink to={'/login'}><span className={style.login}>Login</span></NavLink>\n                    }\n                </div>\n            </div>\n\n            <div className={style.content}></div>\n            <div className={style.content}></div>\n        </header>\n    )\n}\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AuthActionTypes, authMe, setUserDataAC, UserDataType } from '../../redux/auth-reducer';\nimport { ReduxStateType } from '../../redux/redux-store';\nimport Header from './Header';\n\n\nconst mapStateToProps = (state: ReduxStateType): MapStateToPropsHeaderType => {\n    return {\n        isAuth: state.auth.isAuth,\n        login: state.auth.data.login,\n        data: state.auth.data\n    }\n}\nconst mapDispatchToProps = (dispatch: (action: AuthActionTypes | any) => void): MapDispatchToPropsHeaderType => {\n    return {\n        setUserData: ({ id, email, login }: UserDataType) => {\n            dispatch(setUserDataAC(id, email, login))\n        },\n        authMe: () => {\n            dispatch(authMe())\n        }\n    }\n}\n\n\ntype MapStateToPropsHeaderType = {\n    isAuth: boolean\n    login: string\n    data: UserDataType\n}\ntype MapDispatchToPropsHeaderType = {\n    setUserData: ({ id, email, login }: UserDataType) => void\n    authMe: () => void\n}\n\nexport type OwnHeaderPropsType = MapStateToPropsHeaderType & MapDispatchToPropsHeaderType;\n\nclass HeaderContainer extends React.Component<OwnHeaderPropsType> {\n\n    componentDidMount = () => {\n        this.props.authMe()\n    }\n\n    render = () => {\n        return <Header {...this.props} />\n    }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);\n\n","import React from \"react\";\nimport style from './Login.module.css';\n\n\nexport const Login = () => {\n    return <h1>Please log in</h1>\n}","import React from 'react';\nimport './App.css';\nimport NavBar from './components/Navbar/Navbar';\nimport Friends from './components/Friends/Friends';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport store, { ActionTypes, ReduxStateType } from './redux/redux-store';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport { Store } from 'redux';\nimport { Provider } from 'react-redux';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport { Login } from './components/Login/Login';\n\n\ntype AppType = {\n  appState: () => ReduxStateType\n  dispatch: (action: ActionTypes) => void\n  store: Store<ReduxStateType, ActionTypes>\n}\n\nconst App = (props: AppType) => {\n  const state = props.appState();\n\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n        <div className=\"site-wrapper\">\n          <div className='app-wrapper'>\n            <HeaderContainer />\n            <NavBar />\n            <main className='app-wrapper-content'>\n              <Route path='/profile/:userId' render={() => <ProfileContainer />} />\n              <Route path='/dialogs' render={() => <DialogsContainer />} />\n              <Route path='/friends' render={() => <Friends />} />\n              <Route path='/users' render={() => <UsersContainer />} />\n              <Route path='/login' render={() => <Login />} />\n            </main>\n          </div>\n        </div >\n      </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/redux-store';\n\n\nconst rerenderEntireTree = () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App appState={store.getState.bind(store)} dispatch={store.dispatch.bind(store)} store={store} />\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n}\n\nstore.subscribe(rerenderEntireTree)\nrerenderEntireTree();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}